#!/usr/bin/python3

import argparse
import collections.abc
import logging
import os
import subprocess
import sys


supported_options = ('use-backports-linux', )


logger = logging.getLogger()


class Arch:
    pass


class ArchAmd64(Arch):
    NAME = 'amd64'
    FAI_CLASSES = ('AMD64', 'GRUB_PC')


class Release:
    SUPPORTS_LINUX_IMAGE_CLOUD = False


class ReleaseStretch(Release):
    NAME = 'stretch'
    FAI_CLASSES = ('STRETCH', 'BACKPORTS')


class ReleaseBuster(Release):
    NAME = 'buster'
    FAI_CLASSES = ('BUSTER', )
    SUPPORTS_LINUX_IMAGE_CLOUD = True


class ReleaseSid(Release):
    NAME = 'sid'
    FAI_CLASSES = ('SID', )
    SUPPORTS_LINUX_IMAGE_CLOUD = True


class ImageType:
    def convert_image(self, basename):
        pass


class ImageTypeRaw(ImageType):
    def convert_image(self, basename, noop):
        cmd = (
            'tar', '-cS',
            '-f', '{}.raw.tar'.format(basename),
            '--transform', 'flags=r;s|.*\.raw|disk.raw|',
            '{}.raw'.format(basename),
        )
        logging.info('Running: %s', ' '.join(cmd))

        if not noop:
            subprocess.check_call(cmd)


class ImageTypeVhd(ImageType):
    def convert_image(self, basename, noop):
        cmd = (
            'qemu-img', 'convert',
            '-f', 'raw', '-o', 'subformat=fixed,force_size', '-O', 'vpc',
            '{}.raw'.format(basename), '{}.vhd'.format(basename),
        )
        logging.info('Running: %s', ' '.join(cmd))

        if not noop:
            subprocess.check_call(cmd)

        cmd = (
            'tar', '-cS',
            '-f', '{}.vhd.tar'.format(basename),
            '--transform', 'flags=r;s|.*\.vhd|disk.vhd|',
            '{}.vhd'.format(basename),
        )
        logging.info('Running: %s', ' '.join(cmd))

        if not noop:
            subprocess.check_call(cmd)


class Vendor:
    FAI_SIZE = '8G'
    USE_LINUX_IMAGE_CLOUD = False

class VendorNo(Vendor):
    NAME = "nocloud"
    FAI_CLASSES = ('NOCLOUD', )

    image = ImageTypeRaw()


class VendorAzure(Vendor):
    NAME = 'azure'
    FAI_CLASSES = ('AZURE', )
    FAI_SIZE = '30G'
    USE_LINUX_IMAGE_CLOUD = True

    image = ImageTypeVhd()


class VendorEc2(Vendor):
    NAME = 'ec2'
    FAI_CLASSES = ('EC2', )
    FAI_SIZE = '10G'

    image = ImageTypeRaw()


class VendorGce(Vendor):
    NAME = 'gce'
    FAI_CLASSES = ('GCE', )
    FAI_SIZE = '10G'

    image = ImageTypeRaw()


arches = { i.NAME: i for i in Arch.__subclasses__() }
releases = { i.NAME: i for i in Release.__subclasses__() }
vendors = { i.NAME: i for i in Vendor.__subclasses__() }


class Classes(collections.abc.MutableSet):
    def __init__(self):
        self.__data = []
    def __contains__(self, v):
        return v in self.__data
    def __iter__(self):
        return iter(self.__data)
    def __len__(self):
        return len(self.__data)
    def add(self, v):
        logger.info('Adding class %s', v)
        self.__data.append(v)
    def discard(self, v):
        logger.info('Removing class %s', v)
        self.__data.remove(v)


class Main:
    def __init__(self):
        self.classes = Classes()
        self.classes.add('DEBIAN')
        self.classes.add('CLOUD')

    def set_release(self, release):
        self.release = releases[release]()
        self.classes |= self.release.FAI_CLASSES

    def set_vendor(self, vendor):
        self.vendor = vendors[vendor]()
        self.classes |= self.vendor.FAI_CLASSES

    def set_arch(self, arch):
        self.arch = arches[arch]()
        self.classes |= self.arch.FAI_CLASSES

    def check_kernel(self, options):
        if self.release.SUPPORTS_LINUX_IMAGE_CLOUD and self.vendor.USE_LINUX_IMAGE_CLOUD:
            self.classes.add('LINUX_IMAGE_CLOUD')
        else:
            self.classes.add('LINUX_IMAGE_BASE')

        if 'use-backports-linux' in options:
            self.classes.add('BACKPORTS_LINUX')


if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)

    parser = argparse.ArgumentParser()
    parser.add_argument('release', metavar='RELEASE', choices=sorted(releases.keys()))
    parser.add_argument('vendor', metavar='VENDOR', choices=sorted(vendors.keys()))
    parser.add_argument('arch', metavar='ARCH', choices=sorted(arches.keys()))
    parser.add_argument('basename', metavar='BASENAME')
    parser.add_argument('--noop', action='store_true')
    parser.add_argument('-o', '--option', nargs='*', metavar='OPTION', default=(),
            dest='options', choices=supported_options)
    args = parser.parse_args()

    m = Main()
    m.set_release(args.release)
    m.set_vendor(args.vendor)
    m.set_arch(args.arch)
    m.check_kernel(args.options)

    cmd = ['sudo']
    cmd.append('FAI_CLOUD_BASENAME={}'.format(os.path.realpath(args.basename)))
    cmd.append('fai-diskimage')
    cmd.append('--verbose')
    cmd.extend(('--hostname', 'debian'))
    cmd.extend(('--class', ','.join(m.classes)))
    cmd.extend(('--size', m.vendor.FAI_SIZE))
    cmd.extend(('--cspace', os.path.join(os.getcwd(), 'config_space')))
    cmd.append(args.basename + '.raw')
    logging.info('Running: %s', ' '.join(cmd))

    if not args.noop:
        subprocess.check_call(cmd)

    m.vendor.image.convert_image(args.basename, args.noop)
